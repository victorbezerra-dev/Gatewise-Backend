// <auto-generated />
using System;
using GateWise.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GateWise.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711012551_AddAccessLogs")]
    partial class AddAccessLogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CommandId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<string>("RawConfirmationJson")
                        .HasColumnType("text")
                        .HasColumnName("raw_confirmation_json");

                    b.Property<string>("RawRequestJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("raw_request_json");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_access_logs");

                    b.ToTable("access_logs", (string)null);
                });

            modelBuilder.Entity("GateWise.Core.Entities.AccessGrant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorizedUserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("authorized_user_id");

                    b.Property<DateTime?>("GrantedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at");

                    b.Property<string>("GrantedByUserId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("granted_by_user_id");

                    b.Property<int>("LabId")
                        .HasColumnType("integer")
                        .HasColumnName("lab_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_access_grants");

                    b.HasIndex("AuthorizedUserId")
                        .HasDatabaseName("ix_access_grants_authorized_user_id");

                    b.HasIndex("GrantedByUserId")
                        .HasDatabaseName("ix_access_grants_granted_by_user_id");

                    b.HasIndex("LabId")
                        .HasDatabaseName("ix_access_grants_lab_id");

                    b.ToTable("access_grants", (string)null);
                });

            modelBuilder.Entity("GateWise.Core.Entities.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("building");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_time");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("imagem_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_labs");

                    b.ToTable("labs", (string)null);
                });

            modelBuilder.Entity("GateWise.Core.Entities.LabAccessManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LabId")
                        .HasColumnType("integer")
                        .HasColumnName("lab_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lab_access_managers");

                    b.HasIndex("LabId")
                        .HasDatabaseName("ix_lab_access_managers_lab_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lab_access_managers_user_id");

                    b.ToTable("lab_access_managers", (string)null);
                });

            modelBuilder.Entity("GateWise.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("DeviceManufactureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_manufacture_name");

                    b.Property<string>("DeviceModel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_model");

                    b.Property<string>("DevicePublicKeyPem")
                        .HasColumnType("text")
                        .HasColumnName("device_public_key_pem");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OperationalSystem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operational_system");

                    b.Property<string>("OperationalSystemVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operational_system_version");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("registration_number");

                    b.Property<string>("UserAvatarUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_avatar_url");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GateWise.Core.Entities.AccessGrant", b =>
                {
                    b.HasOne("GateWise.Core.Entities.User", "AuthorizedUser")
                        .WithMany()
                        .HasForeignKey("AuthorizedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_grants_users_authorized_user_id");

                    b.HasOne("GateWise.Core.Entities.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedByUserId")
                        .HasConstraintName("fk_access_grants_users_granted_by_user_id");

                    b.HasOne("GateWise.Core.Entities.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_grants_labs_lab_id");

                    b.Navigation("AuthorizedUser");

                    b.Navigation("GrantedByUser");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("GateWise.Core.Entities.LabAccessManager", b =>
                {
                    b.HasOne("GateWise.Core.Entities.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lab_access_managers_labs_lab_id");

                    b.HasOne("GateWise.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lab_access_managers_users_user_id");

                    b.Navigation("Lab");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
